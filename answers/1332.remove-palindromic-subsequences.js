/*
 * @lc app=leetcode id=1332 lang=javascript
 *
 * [1332] Remove Palindromic Subsequences
 *
 * https://leetcode.com/problems/remove-palindromic-subsequences/description/
 *
 * algorithms
 * Easy (76.55%)
 * Likes:    1677
 * Dislikes: 1772
 * Total Accepted:    139.5K
 * Total Submissions: 182.2K
 * Testcase Example:  '"ababa"'
 *
 * You are given a string s consisting only of letters 'a' and 'b'. In a single
 * step you can remove one palindromic subsequence from s.
 *
 * Return the minimum number of steps to make the given string empty.
 *
 * A string is a subsequence of a given string if it is generated by deleting
 * some characters of a given string without changing its order. Note that a
 * subsequence does not necessarily need to be contiguous.
 *
 * A string is called palindrome if is one that reads the same backward as well
 * as forward.
 *
 *
 * Example 1:
 *
 *
 * Input: s = "ababa"
 * Output: 1
 * Explanation: s is already a palindrome, so its entirety can be removed in a
 * single step.
 *
 *
 * Example 2:
 *
 *
 * Input: s = "abb"
 * Output: 2
 * Explanation: "abb" -> "bb" -> "".
 * Remove palindromic subsequence "a" then "bb".
 *
 *
 * Example 3:
 *
 *
 * Input: s = "baabb"
 * Output: 2
 * Explanation: "baabb" -> "b" -> "".
 * Remove palindromic subsequence "baab" then "b".
 *
 *
 *
 * Constraints:
 *
 *
 * 1 <= s.length <= 1000
 * s[i] is either 'a' or 'b'.
 *
 *
 */

// @lc code=start
/**
 * @param {string} s
 * @return {number}
 */
var removePalindromeSub = function(s) {
  let leftPointer = 0
  let rightPointer = s.length - 1

  /**
   * 由于 s 只包含 a 和 b, 且题目所要求的 palindromic subsequence 是可以不连续的.
   * 那么考虑任意最坏的情况, 找到并删除所有 a (任意次个相同字符一定是 palindromic), 然后删除所有 b, 一定只会走 2 步
   * 所以只需要考虑比 2 步更好的情况, 也就是 1 步删光就好.
   * 那么也就是只需要判断 s 自身是不是 palindromic
   */
  for (;leftPointer <= rightPointer;) {
    if (s[leftPointer] !== s[rightPointer]) {
      return 2
    }

    leftPointer += 1
    rightPointer -= 1
  }

  return 1
};
// @lc code=end
